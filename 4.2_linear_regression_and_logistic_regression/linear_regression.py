import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D  # need to keep this for 3D plot

# from mpl_toolkits.mplot3d import Axes3D  # need to keep this for 3D plot

def get_data(fname='linear-regression.txt'):
    """
        given a file name, return a pandas data frame
        assume separated by comma
    """
    raw_data = np.array(pd.read_csv(fname, sep=",", header=None))
    X, y = raw_data[:, :2], raw_data[:, 2]
    return X, y


class LinearRegression:
    def __init__(self, X, y):
        # use np.matrix for easier dot product.
        self.X = np.matrix(X)
        self.y = np.matrix(y)

    def fit(self):
        inv_matrix = np.linalg.inv(self.X.T * self.X)
        weights = inv_matrix * self.X.T * self.y.T
        return np.array(weights).T[0]  # get rid of matrix's format


def plotter(X, y, weights):
    # plot 3d data points
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # scatter for raw data
    ax.scatter(X[:, 0], X[:, 1], y, color='red', marker='^')

    # plot the hyper plane by weights
    point = np.array([0, 0, 0])
    weights = np.insert(weights, 2, -1)  # have to add a weight in the end to draw proper plane.
    normal = np.array(weights)
    d = -point.dot(normal)

    # create x,y
    xx, yy = np.meshgrid(range(2), range(2))
    z = (-normal[0] * xx - normal[1] * yy - d) * 1. / normal[2]
    ax.plot_surface(xx, yy, z, alpha=0.2)

    ax.set_xlabel('X Label')
    ax.set_ylabel('Y Label')
    ax.set_zlabel('Z Label')

    plt.legend()
    plt.title('Linear Regression Algorithm\n3D data points with hyper plane generated by weights')
    plt.show()


X, y = get_data()
linear_regr = LinearRegression(X, y)
weights = linear_regr.fit()
print(weights)
# plotter(X, y, weights)

"""
    below is the sklearn version of linear regression
    uncomment to compare both implementations
"""
# from sklearn.linear_model import LinearRegression
# clf = LinearRegression()
# clf.fit(X, y)
# print('sklearn weights:', clf.coef_)
# print('sklearn accuracy:', clf.score(X, y))
